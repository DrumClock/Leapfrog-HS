
### printer.cfg 

###  Z-max endstop
#[gcode_button z_max]  ## -- don't change name! --   
#pin:  ^PC0   ## Z-STOP         
#press_gcode:  

#########################################

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

#########################################
##       USER HOMING SEQUENCE          
##
##    for this cfg:  
##  - Endstop position
##  - Sensorless 
##  - Dual Carriage ( IDEX printer )
##  - Z-max endstop ( safety endstop ) 
##  - Disable BED MESH fo M605 mode S2/S3 
##
#########################################

[homing_override]
axes: z
set_position_z: 0
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   {% set act_speed = printer.gcode_move.speed %}   
                
    ##### get user defines X/Y position for "Z probe"    
    {% set probe_pos_x = (printer.configfile.config['stepper_x'].position_max)|int / 2 - (printer.configfile.config[printer['probe'].name].x_offset)|float %}
    {% set probe_pos_y = (printer.configfile.config['stepper_y'].position_max)|int / 2 - (printer.configfile.config[printer['probe'].name].y_offset)|float %}
    {% set z_hop = 5 %}
    {% set max_z_velocity = printer.configfile.config['printer'].max_z_velocity %}

    ##### start print position - user defined 
    {% set start_pos_x = probe_pos_x %}
    {% set start_pos_y = probe_pos_y %}
    
    ##### get user defines sensorless homing
    {% set home_offset_x = ( (printer.configfile.config['stepper_x'].position_endstop)|int -10 ) |abs %}
    {% set home_offset_y = ( (printer.configfile.config['stepper_y'].position_endstop)|int -10 ) |abs %}
    {% set home_current = 0.600 %}     
    
    {% set  enable_mesh  = true %}
    ##### set AUTO BED MESH 		  
     {% if user_vars.bed_mesh is defined   %}
        {% set enable_mesh = user_vars.bed_mesh.enable  %}    
     {% endif %}
   ##### disable BED MESH for M605 mode S2/S3
     {% if user_vars.idex_mode is defined and user_vars.idex_mode.active in [2,3] %}
        {% set enable_mesh = false %}  
     {% endif %}
                 
##### Z-hop befor homing - safe lift nozzle ------------------

     {% if 'gcode_button z_max' in printer and printer['gcode_button z_max'].state == 'PRESSED' %} 
       ## info: QUERY_BUTTON button=z_max    RELEASED / PRESSED
       ## no Z-hop befor homing - Z-max endstop activated
     {% else %}  
       ## Z-hop befor homing - lift nozzle
       G91; set relative
       G0 Z{z_hop} F100 
       G90; set absolute
     {% endif %}
      ## restore speed
      #G1 F{act_speed}   
      G1 F30000      

##### Set TMC driver current for all axis during in Sensorless Homing ---------------------------- 

  {% if "xy" not in printer.toolhead.homed_axes %}
   {% for stepper in printer['motion_report'].steppers|sort %}   
 	 {% set endstop_pin = (printer.configfile.config[stepper].endstop_pin)|replace(":", ",") %}   ; tmc2209_stepper_y,virtual_endstop
       {% if 'virtual_endstop' ==  endstop_pin.split(',')[1] %}    
          {% set driver = endstop_pin.split('_')[0] %}    ; tmc2209        
          {% set msg = ("%s - Set %s driver run current to %s A" % (stepper,driver,home_current|round(2))) %}
            RESPOND MSG='{msg}'  
           SET_TMC_CURRENT STEPPER={stepper} CURRENT={home_current}
	   {% endif %}        
    {% endfor %}	
     # G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)  
   {% endif %}
   
##### X homing ---------------------------------------------- 
   
    {% if "x" not in printer.toolhead.homed_axes %}
        {% if 'virtual_endstop' in  printer.configfile.config['stepper_x'].endstop_pin %}        
	      RESPOND MSG="Sensorless Homing X" 
          G28 X0
          ## Sets an offset of 10 mm from the end position
          G1 X{home_offset_x} F1200  
          M400      
        {% else %}
    	   RESPOND MSG="Endstop Homing X"
           G28 X0
       {% endif %}
    {% endif %}	
    
##### Y homing ---------------------------------------------- 
        
    {% if "y" not in printer.toolhead.homed_axes %}  
       {% if 'virtual_endstop' in printer.configfile.config['stepper_y'].endstop_pin %}
          RESPOND MSG="Sensorless Homing Y"
          G28 Y0    
          ## Sets an offset of 10 mm from the end position
          G1 Y{home_offset_y} F1200   
          M400         
       {% else %}
	      RESPOND MSG="Endstop Homing Y"
          G28 Y0
       {% endif %}
     {% endif %}


##### Set TMC driver current for all axis during  print  ---------------------------- 

   {% if "xy" not in printer.toolhead.homed_axes %}
	{% for stepper in printer['motion_report'].steppers|sort %}   
 	   {% set endstop_pin = (printer.configfile.config[stepper].endstop_pin)|replace(":", ",") %}   ; tmc2209_stepper_y,virtual_endstop
             {% if 'virtual_endstop' ==  endstop_pin.split(',')[1] %}
               {% set driver = endstop_pin.split('_')[0] %}    ; tmc2209             
               {% set run_current = printer[("%s %s" % (driver,stepper))].run_current|float %}
                {% set msg = ("%s - Set %s driver run current to %s A" % (stepper,driver,run_current|round(2))) %}
                RESPOND MSG='{msg}'  
                SET_TMC_CURRENT STEPPER={stepper} CURRENT={run_current}
	   {% endif %}        
     {% endfor %}	
      # G4 P2000   ## Wait just a second… (give StallGuard registers time to clear) 
   {% endif %} 
   
#####  -------- DUAL CARRIAGE -----------------------
    
     {% if 'dual_carriage' in printer['motion_report'].steppers %}  

      ## ---- IDEX - Set mode for macro M605 --------
        {% if 'gcode_macro M605' in printer  and user_vars.idex_mode.active in [2,3] %} 
           ### Reset all extruder to default 
           DEFAULT_EXTRUDER_SETTINGS
           ### activate IDEX mode
           ACTIVATE_IDEX   MODE={'COPY' if user_vars.idex_mode.active == 2  else 'MIRROR'}      
       
      ## ---- Open endstop for dual carriage ----     
        {% else %}     
          {% set axis = printer.configfile.settings.dual_carriage.axis %}     
          {% set endstop_open = ( (printer.configfile.config['dual_carriage'].position_endstop)|int -2 ) |abs %}

         RESPOND MSG="Open endstop for dual carriage"
       
        ## 'endstop_open' = gap (in mm) between toolhead and endstop when parking (mm)
        SET_DUAL_CARRIAGE CARRIAGE=1
        G1 {axis + endstop_open|string}  
       
        ## set extruder and carrriage with Z-probe 
        SET_DUAL_CARRIAGE CARRIAGE=0

       {%  if printer.toolhead.extruder != 'extruder' %} 
          ACTIVATE_EXTRUDER EXTRUDER=extruder 
       {% endif %} 
     
        ## Set TMC current for parking carriage
         {% for object in printer.configfile.config|sort %}
           {% if 'tmc' is in object  and object.split(' ')[1]  == 'dual_carriage' %}   
              {% set msg = ("Set %s driver run current to %s A" % (object.split(' ')[1],0.3)) %}  
              {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
              RESPOND MSG='{msg}'
              SET_TMC_CURRENT STEPPER=dual_carriage CURRENT=0.3
          {% endif %}        
         {% endfor %}	              
        {% endif %}  
        
     {% endif %} 
     
##### Z homing ----------------------------------------------
   
    {% set msg = ("Probe Homing Z to position X %s Y %s" % (probe_pos_x,probe_pos_y)) %}
       RESPOND MSG='{msg}'         
       ## XY Location of the Z probe
       G0 X{probe_pos_x} Y{probe_pos_y} F7200   
       ## HOME Z
       G28 Z0   
       ## Elevator Z
       G0 Z{z_hop*2} F200      

##### Bed leveling  - if not applied -------------------------
     
       {% if 'z_tilt' in printer and not printer['z_tilt'].applied %}
          RESPOND MSG="Activate Z_TILT_ADJUST"
          Z_TILT_ADJUST
       {% elif 'quad_gantry_level' in printer and not printer['quad_gantry_level'].applied %}
          RESPOND MSG="Activate QUAD_GANTRY_LEVEL"
          QUAD_GANTRY_LEVEL
       {% endif %}

#####  Bed Mesh Adaptive - only when printing !  ------------
      
     {% if  printer['virtual_sdcard'].is_active == true  %}  
       {% if enable_mesh %}  
         RESPOND MSG="Activate ADAPTIVE method for BED_MESH_CALIBRATE"
          {% if 'probe_eddy_current' in printer['probe'].name %}
            ## Rapid 
            BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid ADAPTIVE=1
           {% else %}  
            ## Classic 
            BED_MESH_CALIBRATE ADAPTIVE=1 
           {% endif %}         
        {% else %}
          RESPOND MSG="Disable BED MESH ADAPTIVE for M605" 
       {% endif %}
     {% endif %}     

    
##### START PRINT position  --------------------------------------
  
       
    ##  XY Location               
       {% set msg = ("Moving to start position X %s Y %s" % (start_pos_x,start_pos_y)) %}
       RESPOND MSG='{msg}'      
         G0 {'X'+start_pos_x|string} {'Y'+start_pos_y|string} F7200
      {% if "z" not in printer.toolhead.homed_axes %}  
         ## HOME Z
         G28 Z0   
         ## Elevator Z
         G0 Z{z_hop*2} F200 
      {% endif %}     
       
       #G1 F{act_speed}
       G0 F3000